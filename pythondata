#Lists: Ordered, mutable collections of items enclosed in square brackets []. They can hold elements of different data types and allow duplicate values.
#Tuples: Ordered, immutable collections of items similar to lists but enclosed in parentheses (). Once created, their elements cannot be changed.
#Sets: Unordered collections of unique elements enclosed in curly braces {}. Sets are useful for removing duplicates and checking element membership.
#Dictionaries: Unordered collections of key-value pairs enclosed in curly braces {}. Keys must be unique and immutable, while values can be of any data type. Dictionaries are efficient for storing data associated with labels.
#Data Structure	Characteristics	Use Cases
#List	Ordered, mutable heterogeneous	Storing sequences of items, working with data that needs to be modified
#Tuple	Ordered, immutable heterogeneous	Representing fixed data sets, passing arguments to function.
#Set	Unordered, mutable homogeneous (unique elements)	Removing duplicates, checking elements existence.
#Dictionary	Unordered, mutable, key-value pairs	Storing data with labels, associating data with unique identifiers.
#Exploring Dictionary Methods, Tuple Immutability, and Set Operations Exploring Dictionary Methods

#Dictionaries provide methods like get(key, default), keys(), values(), and items() for accessing and manipulating key-value pairs.

get(key, default): This method retrieves the value associated with a specified key in the dictionary. If the key is not found, it returns the default value (if provided) or None.
keys(): This method returns a view object that contains all the keys in the dictionary, allowing you to iterate over them
values(): Similar to keys(), this method returns a view object that contains all the values in the dictionary.
items(): This method returns a view object that contains tuples of key-value pairs, allowing you to iterate over them together.
  
#Tuple Immutability

Tuples are like lists, but once they are created, you cannot change their elements. This property is called immutability.
Immutability ensures that the contents of a tuple remain constant, which can be useful in situations where you don’t want accidental changes to data.
However, you can still access elements in a tuple using indexing or slicing, just like lists.
#Set

Sets are collections of unique elements, meaning they don’t allow duplicate values. Sets offer operations like union, intersection, and difference for combining and comparing sets.

union(): Combines two sets to create a new set containing all unique elements from both sets.
intersection(): Finds the common elements between two sets.
difference(): Finds the elements present in one set but not in another set.
